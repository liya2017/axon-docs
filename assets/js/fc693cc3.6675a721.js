"use strict";(self.webpackChunkaxon_docs=self.webpackChunkaxon_docs||[]).push([[330],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>k});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(t),k=l,u=c["".concat(s,".").concat(k)]||c[k]||m[k]||i;return t?n.createElement(u,r(r({ref:a},p),{},{components:t})):n.createElement(u,r({ref:a},p))}));function k(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2912:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=t(7462),l=(t(7294),t(3905));t(4996);const i={title:"Latest Version",hide_title:!0,sidebar_position:1},r=void 0,o={unversionedId:"api/latest_version",id:"api/latest_version",title:"Latest Version",description:"JSON-RPC API Endpoints allow you to interact with a local or remote Axon node using HTTP, IPC or WebSocket.",source:"@site/docs/api/latest_version.md",sourceDirName:"api",slug:"/api/latest_version",permalink:"/api/latest_version",draft:!1,editUrl:"https://github.com/axonweb3/axon-docs/edit/main/docs/api/latest_version.md",tags:[],version:"current",lastUpdatedAt:1678859121,formattedLastUpdatedAt:"Mar 15, 2023",sidebarPosition:1,frontMatter:{title:"Latest Version",hide_title:!0,sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/category/api"},next:{title:"DevOps",permalink:"/category/devops"}},s={},d=[{value:"RPC Methods",id:"rpc-methods",level:2},{value:"Gossip Methods",id:"gossip-methods",level:2},{value:"<code>eth_sendRawTransaction</code>",id:"eth_sendrawtransaction",level:3},{value:"Params",id:"params",level:4},{value:"Returns",id:"returns",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>eth_blockNumber</code>",id:"eth_blocknumber",level:3},{value:"Params",id:"params-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>eth_submitWork</code>",id:"eth_submitwork",level:3},{value:"Params",id:"params-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"<code>eth_submitHashrate</code>",id:"eth_submithashrate",level:3},{value:"Params",id:"params-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"History Methods",id:"history-methods",level:2},{value:"<code>eth_getBlockByNumber</code>",id:"eth_getblockbynumber",level:3},{value:"Params",id:"params-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"<code>eth_getBlockByHash</code>",id:"eth_getblockbyhash",level:3},{value:"Params",id:"params-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"<code>eth_getTransactionByHash</code>",id:"eth_gettransactionbyhash",level:3},{value:"Params",id:"params-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Examples",id:"examples-6",level:4},{value:"<code>eth_getBlockTransactionCountByNumber</code>",id:"eth_getblocktransactioncountbynumber",level:3},{value:"Params",id:"params-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Examples",id:"examples-7",level:4},{value:"<code>eth_getTransactionReceipt</code>",id:"eth_gettransactionreceipt",level:3},{value:"Params",id:"params-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Examples",id:"examples-8",level:4},{value:"<code>eth_feeHistory</code>",id:"eth_feehistory",level:3},{value:"Params",id:"params-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Examples",id:"examples-9",level:4},{value:"<code>eth_getBlockTransactionCountByHash</code>",id:"eth_getblocktransactioncountbyhash",level:3},{value:"Params",id:"params-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Examples",id:"examples-10",level:4},{value:"<code>eth_getTransactionByBlockHashAndIndex</code>",id:"eth_gettransactionbyblockhashandindex",level:3},{value:"Params",id:"params-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Examples",id:"examples-11",level:4},{value:"<code>eth_getTransactionByBlockNumberAndIndex</code>",id:"eth_gettransactionbyblocknumberandindex",level:3},{value:"Params",id:"params-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Examples",id:"examples-12",level:4},{value:"State Methods",id:"state-methods",level:2},{value:"<code>eth_getTransactionCount</code>",id:"eth_gettransactioncount",level:3},{value:"Params",id:"params-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Examples",id:"examples-13",level:4},{value:"<code>eth_getBalance</code>",id:"eth_getbalance",level:3},{value:"Params",id:"params-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Examples",id:"examples-14",level:4},{value:"<code>eth_chainId</code>",id:"eth_chainid",level:3},{value:"Params",id:"params-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Examples",id:"examples-15",level:4},{value:"<code>net_version</code>",id:"net_version",level:3},{value:"Params",id:"params-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Examples",id:"examples-16",level:4},{value:"<code>eth_call</code>",id:"eth_call",level:3},{value:"Params",id:"params-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Examples",id:"examples-17",level:4},{value:"<code>eth_estimateGas</code>",id:"eth_estimategas",level:3},{value:"Params",id:"params-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Examples",id:"examples-18",level:4},{value:"<code>eth_getCode</code>",id:"eth_getcode",level:3},{value:"Params",id:"params-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Examples",id:"examples-19",level:4},{value:"<code>eth_gasPrice</code>",id:"eth_gasprice",level:3},{value:"Params",id:"params-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Examples",id:"examples-20",level:4},{value:"<code>net_listening</code>",id:"net_listening",level:3},{value:"Params",id:"params-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Examples",id:"examples-21",level:4},{value:"<code>eth_mining</code>",id:"eth_mining",level:3},{value:"Params",id:"params-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Examples",id:"examples-22",level:4},{value:"<code>net_peerCount</code>",id:"net_peercount",level:3},{value:"Params",id:"params-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Examples",id:"examples-23",level:4},{value:"<code>eth_syncing</code>",id:"eth_syncing",level:3},{value:"Params",id:"params-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Examples",id:"examples-24",level:4},{value:"<code>eth_getLogs</code>",id:"eth_getlogs",level:3},{value:"Params",id:"params-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Examples",id:"examples-25",level:4},{value:"<code>web3_clientVersion</code>",id:"web3_clientversion",level:3},{value:"Params",id:"params-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Examples",id:"examples-26",level:4},{value:"<code>eth_accounts</code>",id:"eth_accounts",level:3},{value:"Params",id:"params-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Examples",id:"examples-27",level:4},{value:"<code>web3_sha3</code>",id:"web3_sha3",level:3},{value:"Params",id:"params-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Examples",id:"examples-28",level:4},{value:"<code>eth_getStorageAt</code>",id:"eth_getstorageat",level:3},{value:"Params",id:"params-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Examples",id:"examples-29",level:4},{value:"<code>eth_coinbase</code>",id:"eth_coinbase",level:3},{value:"Params",id:"params-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Examples",id:"examples-30",level:4},{value:"<code>eth_hashrate</code>",id:"eth_hashrate",level:3},{value:"Params",id:"params-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Examples",id:"examples-31",level:4},{value:"RPC Types",id:"rpc-types",level:2},{value:"<code>BlockId</code>",id:"blockid",level:3},{value:"<code>H160</code>",id:"h160",level:3},{value:"Example",id:"example",level:4},{value:"<code>H256</code>",id:"h256",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>Hex</code>",id:"hex",level:3},{value:"Example",id:"example-2",level:4},{value:"<code>Hash</code>",id:"hash",level:3},{value:"Example",id:"example-3",level:4},{value:"<code>String</code>",id:"string",level:3},{value:"Example",id:"example-4",level:4},{value:"<code>Bool</code>",id:"bool",level:3},{value:"Example",id:"example-5",level:4},{value:"<code>Bloom</code>",id:"bloom",level:3},{value:"<code>F64</code>",id:"f64",level:3},{value:"<code>U64</code>",id:"u64",level:3},{value:"<code>U256</code>",id:"u256",level:3},{value:"<code>TransactionView</code>",id:"transactionview",level:3},{value:"Fields",id:"fields",level:4},{value:"Examples",id:"examples-32",level:4},{value:"<code>BlockView</code>",id:"blockview",level:3},{value:"Fields",id:"fields-1",level:4},{value:"<code>Web3Filter</code>",id:"web3filter",level:3},{value:"Fields",id:"fields-2",level:4},{value:"<code>AccessList</code>",id:"accesslist",level:3},{value:"Fields",id:"fields-3",level:4},{value:"<code>AccessListItem</code>",id:"accesslistitem",level:3},{value:"Fields",id:"fields-4",level:4},{value:"<code>TransactionView</code>",id:"transactionview-1",level:3},{value:"Fields",id:"fields-5",level:4},{value:"Example",id:"example-6",level:4},{value:"<code>BlockView</code>",id:"blockview-1",level:3},{value:"Fields",id:"fields-6",level:4},{value:"<code>Web3Log</code>",id:"web3log",level:3},{value:"Fields",id:"fields-7",level:4},{value:"<code>Web3SyncStatus</code>",id:"web3syncstatus",level:3},{value:"Fields",id:"fields-8",level:4},{value:"<code>Web3CallRequest</code>",id:"web3callrequest",level:3},{value:"Fields",id:"fields-9",level:4},{value:"<code>Web3FeeHistory</code>",id:"web3feehistory",level:3},{value:"Fields",id:"fields-10",level:4},{value:"<code>Web3Receipt</code>",id:"web3receipt",level:3},{value:"Fields",id:"fields-11",level:4},{value:"<code>Web3ReceiptLog</code>",id:"web3receiptlog",level:3},{value:"Fields",id:"fields-12",level:4}],p={toc:d};function m(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"JSON-RPC API Endpoints allow you to interact with a local or remote Axon node using HTTP, IPC or WebSocket."),(0,l.kt)("h2",{id:"rpc-methods"},"RPC Methods"),(0,l.kt)("h2",{id:"gossip-methods"},"Gossip Methods"),(0,l.kt)("p",null,"Gossip methods track the head of the chain. In this way, transactions can move through the network and find their way into blocks; clients can discover new blocks as well. "),(0,l.kt)("h3",{id:"eth_sendrawtransaction"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_sendRawTransaction")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_sendRawTransaction(data)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))," "))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," ")),(0,l.kt)("p",null,"Submits a pre-signed transaction for broadcast to the Axon network."),(0,l.kt)("h4",{id:"params"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - The signed transaction data.")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,"TRANSACTION HASH - 32 Bytes - the transaction hash."),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_sendRawTransaction",\n    "params": [\n        "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"\n}\n')),(0,l.kt)("h3",{id:"eth_blocknumber"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_blockNumber")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_blockNumber()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," ")),(0,l.kt)("p",null,"Returns the current ",(0,l.kt)("inlineCode",{parentName:"p"},"latest")," block number."),(0,l.kt)("h4",{id:"params-1"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"BLOCK NUMBER - a hex code of an integer representing the current block number the client is on."),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_blockNumber",\n    "params": []\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x3466",\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"eth_submitwork"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_submitWork")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_submitWork(nc,hash,summary)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nc"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"summary"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool"))," ")),(0,l.kt)("p",null,"Used for submitting a proof-of-work solution. Since the axon does not use it, so returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," forever."),(0,l.kt)("h4",{id:"params-2"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nc")," - 8 Bytes, the nonce found."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash")," -  32 Bytes, the header's pow-hash."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"summary")," - 32 Bytes, the mix digest.")),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,"Boolean - returns true if the provided solution is valid, otherwise false.Since the axon does not use it, so return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," forever."),(0,l.kt)("h4",{id:"examples-2"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_submitWork",\n    "params": [\n     "0x0000000000000001", \n     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef", "0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000"\n    ],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":64,\n    "jsonrpc":"2.0",\n    "result": true\n}\n\n')),(0,l.kt)("h3",{id:"eth_submithashrate"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_submitHashrate")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_submitHashrate(hash_rate,client_id)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash_rate"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"client_id"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool"))," ")),(0,l.kt)("p",null,"Used for submitting mining hashrate. This method always returns true."),(0,l.kt)("h4",{id:"params-3"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash_rate")," - Hashrate, a hexadecimal string representation (32 bytes) of the hash rate."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"client_id")," -  ID, String, a random hexadecimal(32 bytes) ID identifying the client.")),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,"Boolean - returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if submitting went through successfully and ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("h4",{id:"examples-3"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_submitHashrate",\n    "params": [\n     "0x0000000000000000000000000000000000000000000000000000000000500000", "0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c"\n    ],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":64,\n    "jsonrpc":"2.0",\n    "result": true\n}\n\n')),(0,l.kt)("h2",{id:"history-methods"},"History Methods"),(0,l.kt)("p",null,"History methods retrieve the historical records of every block since the genesis. This is like one large append-only file, and includes all block headers, block bodies, uncle blocks, and transaction receipts."),(0,l.kt)("h3",{id:"eth_getblockbynumber"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getBlockByNumber")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getBlockByNumber(number,show_rich_tx)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"|")," ",(0,l.kt)("inlineCode",{parentName:"li"},'"earliest"')," ",(0,l.kt)("inlineCode",{parentName:"li"},"|")," ",(0,l.kt)("inlineCode",{parentName:"li"},'"latest"')," ",(0,l.kt)("inlineCode",{parentName:"li"},"|")," ",(0,l.kt)("inlineCode",{parentName:"li"},'"pending"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_rich_tx"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Blockview"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockView"))," ")),(0,l.kt)("p",null,"Returns information about a block by block number."),(0,l.kt)("h4",{id:"params-4"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," -  A block number."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_rich_tx")," -  Boolean, if true it returns the full transaction objects, if false only the hashes of the transactions.")),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,"The RPC returns the block details."),(0,l.kt)("h4",{id:"examples-4"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getBlockByNumber",\n    "params": [\n        "0x1b4",\n        true\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "hash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "parentHash": "0xd619791daa02617ae2825a4ad7f2eb1379a069ac7b96b1628e75e1e654d5163c",\n        "sha3Uncles": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "author": "0xf4cc1652dcec2e5de9ce6fb1b6f9fa9456e957f1",\n        "miner": "0xf4cc1652dcec2e5de9ce6fb1b6f9fa9456e957f1",\n        "stateRoot": "0xbd8e37758ba2c1d73f0c1dc3ea255f5b7c037f0e8e1ee9feb012461d58be236d",\n        "transactionsRoot": "0x30fe4f21201c335b4501d517872d4d26bec39d350f987ee94e46e27bf7c48aae",\n        "receiptsRoot": "0x77f8178b9f5a0e4aa59ee10d3d96cacfd0d6137fd3728cc01b5e5d6d74f6813f",\n        "number": "0x1b4",\n        "gasUsed": "0xc665442",\n        "gasLimit": "0x1c9c380",\n        "extraData": "0x",\n        "logsBloom": "0xn        "timestamp": "0x62e00014",\n        "difficulty": "0x1",\n        "totalDifficulty": null,\n        "sealFields": [],\n        "baseFeePerGas": "0x539",\n        "uncles": [],\n        "transactions": [{\n            "type": "0x2",\n            "blockNumber": "0x1b4",\n            "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n            "hash": "0xde3e1e12fb3f1a5b6ca32f580f0e7f170195f7a5233eb7d7095c53d7f5c519f5",\n            "nonce": "0x2",\n            "transactionIndex": "0x1b71",\n            "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n            "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n            "value": "0x0",\n            "gas": "0x0",\n            "gasPrice": "0x77359400",\n            "maxFeePerGas": "0x539",\n            "maxPriorityFeePerGas": "0x77359400",\n            "raw": "0x02f8af05028477359400847735940082ea6094ef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca80b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a07bf93b22eb0b40a85d0f8044d1b0201750ee1d8c27d558ae683509b13d8282e6a033e17c1e2b01fed2d742a37704530cd902754d726b96d41e24b5adc7be4dcdd3",\n            "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n            "publicKey": "0x1113b46c2c52050fb9fd29cf88d4a9f8d253e17515dc142f72d8bb2cd18fdb3e45098e11811bcdd1487bafb7b24bf35c174cf6ede558059e23ad60d355f97070",\n            "accessList": [],\n            "chainId": "0x5",\n            "v": "0x0",\n            "r": "0x7bf93b22eb0b40a85d0f8044d1b0201750ee1d8c27d558ae683509b13d8282e6",\n            "s": "0x33e17c1e2b01fed2d742a37704530cd902754d726b96d41e24b5adc7be4dcdd3"\n        }],\n        "size": "0x28f",\n        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "nonce": "0x0"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_getblockbyhash"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getBlockByHash")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getBlockByHash(hash,show_rich_tx)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_rich_tx"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockView"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockView")))),(0,l.kt)("p",null,"Returns information about a block by hash."),(0,l.kt)("h4",{id:"params-5"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_hash")," -  DATA, 32 Bytes, hash of a block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show_rich_tx")," -  Boolean, If true it returns the full transaction objects, if false only the hashes of the transactions.")),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,"The RPC returns the block details by block hash."),(0,l.kt)("h4",{id:"examples-5"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getBlockByHash",\n    "params": [\n        "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        true\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "hash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "parentHash": "0xd619791daa02617ae2825a4ad7f2eb1379a069ac7b96b1628e75e1e654d5163c",\n        "sha3Uncles": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "author": "0xf4cc1652dcec2e5de9ce6fb1b6f9fa9456e957f1",\n        "miner": "0xf4cc1652dcec2e5de9ce6fb1b6f9fa9456e957f1",\n        "stateRoot": "0xbd8e37758ba2c1d73f0c1dc3ea255f5b7c037f0e8e1ee9feb012461d58be236d",\n        "transactionsRoot": "0x30fe4f21201c335b4501d517872d4d26bec39d350f987ee94e46e27bf7c48aae",\n        "receiptsRoot": "0x77f8178b9f5a0e4aa59ee10d3d96cacfd0d6137fd3728cc01b5e5d6d74f6813f",\n        "number": "0x1b4",\n        "gasUsed": "0xc665442",\n        "gasLimit": "0x1c9c380",\n        "extraData": "0x",\n        "logsBloom": "0xn        "timestamp": "0x62e00014",\n        "difficulty": "0x1",\n        "totalDifficulty": null,\n        "sealFields": [],\n        "baseFeePerGas": "0x539",\n        "uncles": [],\n        "transactions": [{\n            "type": "0x2",\n            "blockNumber": "0x1b4",\n            "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n            "hash": "0xde3e1e12fb3f1a5b6ca32f580f0e7f170195f7a5233eb7d7095c53d7f5c519f5",\n            "nonce": "0x2",\n            "transactionIndex": "0x1b71",\n            "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n            "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n            "value": "0x0",\n            "gas": "0x0",\n            "gasPrice": "0x77359400",\n            "maxFeePerGas": "0x539",\n            "maxPriorityFeePerGas": "0x77359400",\n            "raw": "0x02f8af05028477359400847735940082ea6094ef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca80b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a07bf93b22eb0b40a85d0f8044d1b0201750ee1d8c27d558ae683509b13d8282e6a033e17c1e2b01fed2d742a37704530cd902754d726b96d41e24b5adc7be4dcdd3",\n            "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n            "publicKey": "0x1113b46c2c52050fb9fd29cf88d4a9f8d253e17515dc142f72d8bb2cd18fdb3e45098e11811bcdd1487bafb7b24bf35c174cf6ede558059e23ad60d355f97070",\n            "accessList": [],\n            "chainId": "0x5",\n            "v": "0x0",\n            "r": "0x7bf93b22eb0b40a85d0f8044d1b0201750ee1d8c27d558ae683509b13d8282e6",\n            "s": "0x33e17c1e2b01fed2d742a37704530cd902754d726b96d41e24b5adc7be4dcdd3"\n        }],\n        "size": "0x28f",\n        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "nonce": "0x0"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_gettransactionbyhash"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getTransactionByHash")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getTransactionByHash(blockHash)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blockHash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-TransactionView"},(0,l.kt)("inlineCode",{parentName:"a"},"TransactionView")))),(0,l.kt)("p",null,"Returns the information about a transaction requested by transaction hash."),(0,l.kt)("h4",{id:"params-6"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blockHash")," - Hash of a transaction.")),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,"Object - A transaction object, or null when no transaction was found:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"blockNumber: QUANTITY - block number where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},"gas: QUANTITY - gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},"gasPrice: QUANTITY - gas price provided by the sender in Wei."),(0,l.kt)("li",{parentName:"ul"},"hash: DATA, 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},"input: DATA - the data send along with the transaction. "),(0,l.kt)("li",{parentName:"ul"},"nonce: QUANTITY - the number of transactions made by the sender prior to this one. "),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},"transactionIndex: QUANTITY - integer of the transactions index position in the block. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"value: QUANTITY - value transferred in Wei."),(0,l.kt)("li",{parentName:"ul"},"v: QUANTITY - ECDSA recovery id."),(0,l.kt)("li",{parentName:"ul"},"r: QUANTITY - ECDSA signature r."),(0,l.kt)("li",{parentName:"ul"},"s: QUANTITY - ECDSA signature s.")),(0,l.kt)("h4",{id:"examples-6"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionByHash",\n    "params": [\n        "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "type": "0x2",\n        "blockNumber": "0x1b4",\n        "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "hash": "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n        "nonce": "0x1",\n        "transactionIndex": "0x1b70",\n        "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n        "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n        "value": "0x0",\n        "gas": "0x73a9",\n        "gasPrice": "0x77359400",\n        "maxFeePerGas": "0x539",\n        "maxPriorityFeePerGas": "0x77359400",\n        "raw": "0x02f8af05018477359400847735940082ea6094ef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca80b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a0fa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3da06079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2",\n        "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n        "publicKey": "0x1113b46c2c52050fb9fd29cf88d4a9f8d253e17515dc142f72d8bb2cd18fdb3e45098e11811bcdd1487bafb7b24bf35c174cf6ede558059e23ad60d456798989",\n        "accessList": [],\n        "chainId": "0x5",\n        "v": "0x0",\n        "r": "0xfa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3d",\n        "s": "0x6079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_getblocktransactioncountbynumber"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getBlockTransactionCountByNumber")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getBlockTransactionCountByNumber(number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the number of transactions in a block matching the given block number."),(0,l.kt)("h4",{id:"params-7"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," - A block number.")),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,"Integer of the number of transactions in this block."),(0,l.kt)("h4",{id:"examples-7"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getBlockTransactionCountByNumber",\n    "params": [\n        "0xe90"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x1bb6",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_gettransactionreceipt"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getTransactionReceipt")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getTransactionReceipt(hash)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3Receipt"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3Receipt")))),(0,l.kt)("p",null,"Returns the receipt of a transaction by transaction hash."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note:")," That the receipt is not available for pending transactions."),(0,l.kt)("h4",{id:"params-8"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash")," - 32 Bytes, hash of a transaction.")),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,"Object - A transaction receipt object, or null when no receipt was found."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"transactionHash : DATA, 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},"transactionIndex: QUANTITY - integer of the transactions index position in the block."),(0,l.kt)("li",{parentName:"ul"},"blockHash: DATA, 32 Bytes - hash of the block where this transaction was in."),(0,l.kt)("li",{parentName:"ul"},"blockNumber: QUANTITY - block number where this transaction was in."),(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},"cumulativeGasUsed : QUANTITY - The total amount of gas used when this transaction was executed in the block."),(0,l.kt)("li",{parentName:"ul"},"gasUsed : QUANTITY - The amount of gas used by this specific transaction alone."),(0,l.kt)("li",{parentName:"ul"},"contractAddress : DATA, 20 Bytes - The contract address created, if the transaction was a * contract creation, otherwise null."),(0,l.kt)("li",{parentName:"ul"},"logs: Array - Array of log objects, which this transaction generated."),(0,l.kt)("li",{parentName:"ul"},"logsBloom: DATA, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. It also returns either."),(0,l.kt)("li",{parentName:"ul"},"root : DATA 32 bytes of post-transaction stateroot (pre Byzantium)."),(0,l.kt)("li",{parentName:"ul"},"status: QUANTITY either 1 (success) or 0 (failure).")),(0,l.kt)("h4",{id:"examples-8"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionReceipt",\n    "params": [\n        "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "blockNumber": "0x1b4",\n        "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "contractAddress": null,\n        "cumulativeGasUsed": "0x73a9",\n        "effectiveGasPrice": "0x73a9",\n        "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n        "gasUsed": "0x73a9",\n        "logs": [{\n            "address": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n            "topics": ["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", "0x00000000000000000000000092df69a492c93d22c90247434b8d80944daa38fa", "0x0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e8915"],\n            "data": "0x0000000000000000000000000000000000000000000000000000000000000000",\n            "blockNumber": "0x1b4",\n            "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n            "transactionHash": "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n            "transactionIndex": "0x1b70",\n            "logIndex": "0x0",\n            "removed": false\n        }],\n        "logsBloom": "0xn        "root": "0xbd8e37758ba2c1d73f0c1dc3ea255f5b7c037f0e8e1ee9feb012461d58be236d",\n        "status": "0x1",\n        "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n        "transactionHash": "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n        "transactionIndex": "0x1b70",\n        "type": "0x2"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_feehistory"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_feeHistory")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_feeHistory(block_count,newest_block,reward_percentiles)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_count"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"newest_block"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reward_percentiles"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Array<"),(0,l.kt)("a",{parentName:"li",href:"#type-f64"},(0,l.kt)("inlineCode",{parentName:"a"},"f64")),(0,l.kt)("inlineCode",{parentName:"li"},">")))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3FeeHistory"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3FeeHistory")))),(0,l.kt)("p",null,"Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available. The range between headBlock-4 and headBlock is guaranteed to be available while retrieving data from the pending block and older history are optional to support. For pre-EIP-1559 blocks, the gas prices are returned as rewards and zeroes are returned for the base fee per gas.\nblockCount and newest Block are both required parameters."),(0,l.kt)("h4",{id:"params-9"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_count")," - 256-bit unsigned integer."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"newest_block")," - A block number."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reward_percentiles")," -  (optional) A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.")),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"oldestBlock - Lowest number block of the returned range expressed as a hexidecimal number."),(0,l.kt)("li",{parentName:"ul"},"baseFeePerGas - An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks."),(0,l.kt)("li",{parentName:"ul"},"gasUsedRatio - An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit."),(0,l.kt)("li",{parentName:"ul"},"reward - An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.")),(0,l.kt)("h4",{id:"examples-9"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionReceipt",\n    "params": [\n        "0x8",\n        "0x1b4"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "oldestBlock": "0x0",\n        "reward": null,\n        "baseFeePerGas": [],\n        "gasUsedRatio": []\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_getblocktransactioncountbyhash"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getBlockTransactionCountByHash")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getBlockTransactionCountByHash(hash)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," ")),(0,l.kt)("p",null,"Returns the number of transactions in a block from a block matching the given block hash."),(0,l.kt)("h4",{id:"params-10"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash")," - 32 Bytes, hash of a block.")),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,"Integer of the number of transactions in this block."),(0,l.kt)("h4",{id:"examples-10"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getBlockTransactionCountByHash",\n    "params": [\n        "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x1b72",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_gettransactionbyblockhashandindex"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getTransactionByBlockHashAndIndex")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getTransactionByBlockHashAndIndex(hash,position)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-TransactionView"},(0,l.kt)("inlineCode",{parentName:"a"},"TransactionView"))," ")),(0,l.kt)("p",null,"Returns information about a transaction by block hash and transaction index position."),(0,l.kt)("h4",{id:"params-11"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash")," - 32 Bytes, hash of a block"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position")," - integer of the transaction index position.")),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,"Object - A transaction object, or null when no transaction was found:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"blockNumber: QUANTITY - block number where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},"gas: QUANTITY - gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},"gasPrice: QUANTITY - gas price provided by the sender in Wei."),(0,l.kt)("li",{parentName:"ul"},"hash: DATA, 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},"input: DATA - the data send along with the transaction."),(0,l.kt)("li",{parentName:"ul"},"nonce: QUANTITY - the number of transactions made by the sender prior to this one."),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},"transactionIndex: QUANTITY - integer of the transactions index position in the block. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"value: QUANTITY - value transferred in Wei."),(0,l.kt)("li",{parentName:"ul"},"v: QUANTITY - ECDSA recovery id."),(0,l.kt)("li",{parentName:"ul"},"r: QUANTITY - ECDSA signature r."),(0,l.kt)("li",{parentName:"ul"},"s: QUANTITY - ECDSA signature s.")),(0,l.kt)("h4",{id:"examples-11"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionByBlockHashAndIndex",\n    "params": [\n        "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n        "0x8"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "type": "0x2",\n        "blockNumber": "0x1b4",\n        "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "hash": "0x0f7c17ba06dcb8106dd6956bfdb131cd48cfeaf2dfa21b4f16384d0a872441a2",\n        "nonce": "0x8",\n        "transactionIndex": "0x8",\n        "from": "0xae32a32bdad774608ab473d7ca1993e9921b6a7a",\n        "to": "0x057ef64e23666f000b34ae31332854acbd1c8544",\n        "value": "0x0",\n        "gas": "0x73a9",\n        "gasPrice": "0x77359400",\n        "maxFeePerGas": "0x539",\n        "maxPriorityFeePerGas": "0x77359400",\n        "raw": "0x02f8af05088477359400847735940082ea6094057ef64e23666f000b34ae31332854acbd1c854480b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a0bd71f0ff2689b002dd58512713d91321266f23dcb0900e2b20f33e2be2222627a051f87230181b70d4736f907defbe505b2a3048e50113881c2254814c3f4ccb47",\n        "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n        "publicKey": "0x5651add842f3f79235ca3958f6fafa300d9c54b0632d9bbfb5d8eb926caabdf08a78e3492537223efb295324aae4080348c86bffaa4235867f10766f12345678",\n        "accessList": [],\n        "chainId": "0x5",\n        "v": "0x0",\n        "r": "0xbd71f0ff2689b002dd58512713d91321266f23dcb0900e2b20f33e2be2222627",\n        "s": "0x51f87230181b70d4736f907defbe505b2a3048e50113881c2254814c3f4ccb47"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_gettransactionbyblocknumberandindex"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getTransactionByBlockNumberAndIndex")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getTransactionByBlockNumberAndIndex(number,position)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-TransactionView"},(0,l.kt)("inlineCode",{parentName:"a"},"TransactionView"))," ")),(0,l.kt)("p",null,"Returns information about a transaction by block number and transaction index position."),(0,l.kt)("h4",{id:"params-12"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," -  A block number."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position")," - integer of the transaction index position.")),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,"Object - A transaction object, or null when no transaction was found:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"blockNumber: QUANTITY - block number where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},"gas: QUANTITY - gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},"gasPrice: QUANTITY - gas price provided by the sender in Wei."),(0,l.kt)("li",{parentName:"ul"},"hash: DATA, 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},"input: DATA - the data send along with the transaction."),(0,l.kt)("li",{parentName:"ul"},"nonce: QUANTITY - the number of transactions made by the sender prior to this one."),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},"transactionIndex: QUANTITY - integer of the transactions index position in the block. null when its pending."),(0,l.kt)("li",{parentName:"ul"},"value: QUANTITY - value transferred in Wei."),(0,l.kt)("li",{parentName:"ul"},"v: QUANTITY - ECDSA recovery id."),(0,l.kt)("li",{parentName:"ul"},"r: QUANTITY - ECDSA signature r."),(0,l.kt)("li",{parentName:"ul"},"s: QUANTITY - ECDSA signature s.")),(0,l.kt)("h4",{id:"examples-12"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionByBlockNumberAndIndex",\n    "params": [\n        "0xb14",\n        "0x8"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "type": "0x2",\n        "blockNumber": "0xb14",\n        "blockHash": "0xcaca33a66b32c99d157af1a9f1940c878e37dab6a95c0496a44852c91218658a",\n        "hash": "0x401ee5194c6628800c3437618fe47645d065fae5dcf43c540ebe7d76aa7d4be0",\n        "nonce": "0x123",\n        "transactionIndex": "0x8",\n        "from": "0x12247217ada7661c30a92425b62c756f54bfb5fc",\n        "to": "0x5fbdb2315678afecb367f032d93f642f64180aa3",\n        "value": "0x0",\n        "gas": "0x73a9",\n        "gasPrice": "0x77359400",\n        "maxFeePerGas": "0x539",\n        "maxPriorityFeePerGas": "0x77359400",\n        "raw": "0x02f8b1058201238477359400847735940082ea60945fbdb2315678afecb367f032d93f642f64180aa380b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a0df97bdb5395f8a6a78133ea75b2dfa1fe0edd54710efe1af5766478b472b2719a036d810b450963968711e03c7b7032a1ca9d4cd5f507dbcd6a5299ab46042871d",\n        "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n        "publicKey": "0x5d29609b19fc299039853e319d7be4a153c4c464beca159bef943bef4d50c6fc1180058d25a56d824a32725040d394bb4251c935e834ae2bc7174361fff4dc86",\n        "accessList": [],\n        "chainId": "0x5",\n        "v": "0x0",\n        "r": "0xdf97bdb5395f8a6a78133ea75b2dfa1fe0edd54710efe1af5766478b472b2719",\n        "s": "0x36d810b450963968711e03c7b7032a1ca9d4cd5f507dbcd6a5299ab46042871d"\n    },\n    "id": 2\n}\n\n')),(0,l.kt)("h2",{id:"state-methods"},"State Methods"),(0,l.kt)("p",null,'State methods report the current state of all the data stored. The "state" is like one big shared piece of RAM, and includes account balances, contract data, and gas estimations.'),(0,l.kt)("h3",{id:"eth_gettransactioncount"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getTransactionCount")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getTransactionCount(address,number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the number of transactions sent from an address."),(0,l.kt)("h4",{id:"params-13"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address")," - 20 Bytes, address."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," - Integer block number.")),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null," Integer of the number of transactions send from this address."),(0,l.kt)("h4",{id:"examples-13"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getTransactionCount",\n    "params": [\n        "0x92df69a492c93d22c90247434b8d80944daa38fa"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x12c",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_getbalance"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getBalance")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getBalance(address,number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the balance of the account of given address."),(0,l.kt)("h4",{id:"params-14"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address")," - 20 Bytes - address to check for balance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number")," - A block number.")),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,"Integer of the current balance in Wei."),(0,l.kt)("h4",{id:"examples-14"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_getBalance",\n    "params": [\n        "0x92df69a492c93d22c90247434b8d80944daa38fa"\n    ]\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x8459515c8443cde72e000",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_chainid"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_chainId")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_chainId()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the chain id of axon network."),(0,l.kt)("h4",{id:"params-15"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,"Current chain id."),(0,l.kt)("h4",{id:"examples-15"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "eth_chainId",\n    "params": []\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x5",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"net_version"},(0,l.kt)("inlineCode",{parentName:"h3"},"net_version")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"net_version()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the current network id."),(0,l.kt)("h4",{id:"params-16"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,"String - The current network id."),(0,l.kt)("h4",{id:"examples-16"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "net_version",\n    "params": []\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x5",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_call"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_call")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_call(req,number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"req"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3CallRequest"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3CallRequest"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")))),(0,l.kt)("p",null,"Executes a new message call immediately without creating a transaction on the block chain."),(0,l.kt)("h4",{id:"params-17"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"req")," - The transaction call object",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - (optional) The address the transaction is sent from."),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - The address the transaction is directed to."),(0,l.kt)("li",{parentName:"ul"},"gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions."),(0,l.kt)("li",{parentName:"ul"},"gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas"),(0,l.kt)("li",{parentName:"ul"},"value: QUANTITY - (optional) Integer of the value sent with this transaction"),(0,l.kt)("li",{parentName:"ul"},"data: DATA - (optional) Hash of the method signature and encoded parameters."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," - A block number.")),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("p",null,"DATA - the return value of executed contract."),(0,l.kt)("h4",{id:"examples-17"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_call",\n    "params": [{\n        see above\n    }],\n    "id": 1\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "jsonrpc": "2.0",\n    "result": "0x"\n}\n\n')),(0,l.kt)("h3",{id:"eth_estimategas"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_estimateGas")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_estimateGas(req,number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"req"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3CallRequest"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3CallRequest"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," ")),(0,l.kt)("p",null,"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance."),(0,l.kt)("h4",{id:"params-18"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"req")," - The transaction call object. Expect all properties are optional. If no gas limit is specified geth uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"from: DATA, 20 Bytes - (optional) The address the transaction is sent from."),(0,l.kt)("li",{parentName:"ul"},"to: DATA, 20 Bytes - The address the transaction is directed to."),(0,l.kt)("li",{parentName:"ul"},"gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions."),(0,l.kt)("li",{parentName:"ul"},"gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas"),(0,l.kt)("li",{parentName:"ul"},"value: QUANTITY - (optional) Integer of the value sent with this transaction"),(0,l.kt)("li",{parentName:"ul"},"data: DATA - (optional) Hash of the method signature and encoded parameters."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"number")," - A block number."))),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null," The amount of gas used."),(0,l.kt)("h4",{id:"examples-18"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_call",\n    "params": [{\n        see above\n    }],\n    "id": 1\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "jsonrpc": "2.0",\n    "result": "0x5208" // 21000\n}\n\n')),(0,l.kt)("h3",{id:"eth_getcode"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getCode")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getCode(address,block_number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")))),(0,l.kt)("p",null,"Returns code at a given address."),(0,l.kt)("h4",{id:"params-19"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address")," - DATA, 20 Bytes, address."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number")," - A block number.")),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,"The code from the given address."),(0,l.kt)("h4",{id:"examples-19"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_getCode",\n    "params": [{\n    "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",\n    "0x2",\n    }],\n    "id": 1\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "jsonrpc": "2.0",\n    "result": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"\n}\n\n')),(0,l.kt)("h3",{id:"eth_gasprice"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_gasPrice")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_gasPrice()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns the current price per gas in Wei."),(0,l.kt)("h4",{id:"params-20"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-20"},"Returns"),(0,l.kt)("p",null,"Integer of the current gas price in Wei."),(0,l.kt)("h4",{id:"examples-20"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_gasPrice",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x8",\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"net_listening"},(0,l.kt)("inlineCode",{parentName:"h3"},"net_listening")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"net_listening()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool")))),(0,l.kt)("p",null,"Returns true if client is actively listening for network connections. Always return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," in Axon network."),(0,l.kt)("h4",{id:"params-21"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-21"},"Returns"),(0,l.kt)("p",null," Boolean - ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," when listening, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("h4",{id:"examples-21"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "net_listening",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": true,\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"eth_mining"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_mining")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_mining()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool")))),(0,l.kt)("p",null,"Returns true if client is actively mining new blocks. "),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note:")," Always return ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," in Axon network."),(0,l.kt)("h4",{id:"params-22"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-22"},"Returns"),(0,l.kt)("p",null,"Boolean - returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," of the client is mining, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Always return ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," in Axon network."),(0,l.kt)("h4",{id:"examples-22"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_mining",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": false,\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"net_peercount"},(0,l.kt)("inlineCode",{parentName:"h3"},"net_peerCount")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"net_peerCount()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")))),(0,l.kt)("p",null,"Returns number of peers currently connected to the client."),(0,l.kt)("h4",{id:"params-23"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-23"},"Returns"),(0,l.kt)("p",null,"Integer of the number of connected peers."),(0,l.kt)("h4",{id:"examples-23"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "net_peerCount",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x7",\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"eth_syncing"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_syncing")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_syncing()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3SyncStatus"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3SyncStatus"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"|")," ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"Returns an object with data about the sync status or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". "),(0,l.kt)("h4",{id:"params-24"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-24"},"Returns"),(0,l.kt)("p",null,"Object | Boolean, An object with sync status data or FALSE, when not syncing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"startingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his head)."),(0,l.kt)("li",{parentName:"ul"},"currentBlock: QUANTITY - The current block, same as ",(0,l.kt)("inlineCode",{parentName:"li"},"eth_blockNumber"),"."),(0,l.kt)("li",{parentName:"ul"},"highestBlock: QUANTITY - The estimated highest block.")),(0,l.kt)("h4",{id:"examples-24"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "net_peerCount",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "jsonrpc": "2.0",\n    "result": {\n        startingBlock: \'0x384\',\n        currentBlock: \'0x386\',\n        highestBlock: \'0x454\'\n    }\n}\n')),(0,l.kt)("p",null,"Or when not syncing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "jsonrpc": "2.0",\n    "result": false\n}\n\n')),(0,l.kt)("h3",{id:"eth_getlogs"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getLogs")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getLogs(filter)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filter"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Web3Filter"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3Filter"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary"),(0,l.kt)("a",{parentName:"li",href:"#type-Web3Log"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3Log")))),(0,l.kt)("p",null,"Returns an array of all logs matching a given filter object."),(0,l.kt)("h4",{id:"params-25"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Object - The filter options:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'fromBlock: QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or "pending", "earliest" for not yet mined transactions.'),(0,l.kt)("li",{parentName:"ul"},'toBlock: QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or "pending", "earliest" for not yet mined transactions.'),(0,l.kt)("li",{parentName:"ul"},"address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate."),(0,l.kt)("li",{parentName:"ul"},'topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with "or" options.'),(0,l.kt)("li",{parentName:"ul"},"blockhash: DATA, 32 Bytes - (optional, future) With the addition of EIP-234, blockHash will be a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in in the filter criteria, then neither fromBlock nor toBlock are allowed.")))),(0,l.kt)("h4",{id:"returns-25"},"Returns"),(0,l.kt)("p",null,"Object An object with web3 log data. See ",(0,l.kt)("a",{parentName:"p",href:"#type-Web3Log"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3Log")),"."),(0,l.kt)("h4",{id:"examples-25"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_getLogs",\n    "params": [\n        {\n    topics: [\n      "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n    ],\n  },\n    ],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": [{\n        "address": "0xf44bb5018bfa4a65165595f5e41f4c7456cd3575",\n        "topics": ["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", "0x000000000000000000000000f44bb5018bfa4a65165595f5e41f4c7456cd3575", "0x0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e8915"],\n        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "blockHash": "0xfbda8b37d5d004653dc18623db2467836b64b24d4880ba4e49ba18a1668f440e",\n        "blockNumber": "0x5d54",\n        "transactionHash": "0x12f6f4c0cbf388f87ef3d54e8e9a4988746edd9cf773895997cd355f74e2f635",\n        "transactionIndex": "0x0",\n        "logIndex": "0x0",\n        "removed": false\n    }, {\n        "address": "0xf44bb5018bfa4a65165595f5e41f4c7456cd3575",\n        "topics": ["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", "0x000000000000000000000000f44bb5018bfa4a65165595f5e41f4c7456cd3575", "0x0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e8915"],\n        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "blockHash": "0xfbda8b37d5d004653dc18623db2467836b64b24d4880ba4e49ba18a1668f440e",\n        "blockNumber": "0x5d54",\n        "transactionHash": "0x5829bfbd0a1752441c5eaca366506757684b99071402448c39c9ae8c1f48b104",\n        "transactionIndex": "0x1",\n        "logIndex": "0x0",\n        "removed": false\n    }],\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"web3_clientversion"},(0,l.kt)("inlineCode",{parentName:"h3"},"web3_clientVersion")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"web3_clientVersion()"),"  "),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-String"},(0,l.kt)("inlineCode",{parentName:"a"},"String"))," ")),(0,l.kt)("p",null,"Returns the current client version."),(0,l.kt)("h4",{id:"params-26"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-26"},"Returns"),(0,l.kt)("p",null,"String - The current client version."),(0,l.kt)("h4",{id:"examples-26"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "web3_clientVersion",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0.1.0",\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"eth_accounts"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_accounts")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_accounts()"),"   "),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("inlineCode",{parentName:"li"},"Array")," ",(0,l.kt)("inlineCode",{parentName:"li"},"<")," ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))," ",(0,l.kt)("inlineCode",{parentName:"li"},">"))),(0,l.kt)("p",null,"Returns a list of addresses owned by client."),(0,l.kt)("h4",{id:"params-27"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-27"},"Returns"),(0,l.kt)("p",null,"Array of DATA, 20 Bytes - addresses owned by the client."),(0,l.kt)("h4",{id:"examples-27"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_accounts",\n    "params": [],\n    "id": 2\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id":1,\n  "jsonrpc": "2.0",\n  "result": ["0x407d73d8a49eeb85d32cf465507dd71d507100c1"]\n}\n')),(0,l.kt)("h3",{id:"web3_sha3"},(0,l.kt)("inlineCode",{parentName:"h3"},"web3_sha3")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"web3_sha3(data)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash")))),(0,l.kt)("p",null,"Returns Keccak-256 (not the standardized SHA3-256) of the given data."),(0,l.kt)("h4",{id:"params-28"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - the data to convert into a SHA3 hash.")),(0,l.kt)("h4",{id:"returns-28"},"Returns"),(0,l.kt)("p",null,"DATA - The SHA3 result of the given string."),(0,l.kt)("h4",{id:"examples-28"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n    "jsonrpc": "2.0",\n    "method": "web3_sha3",\n    "params": ["0x68656c6c6f20776f726c64"],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n    "jsonrpc": "2.0",\n    "result": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_getstorageat"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_getStorageAt")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_getStorageAt(address,position,number)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))))),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))," ")),(0,l.kt)("p",null,"Returns the value from a storage position at a given address."),(0,l.kt)("h4",{id:"params-29"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address")," - 20 Bytes - address of the storage."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"position")," -  integer of the position in the storage."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number")," - A block number.")),(0,l.kt)("h4",{id:"returns-29"},"Returns"),(0,l.kt)("p",null,"The value at this storage position."),(0,l.kt)("h4",{id:"examples-29"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "web3_sha3",\n    "params": [\n     "0x295a70b2de5e3953354a6a8344e616ed314d7251", \n     "0x0",\n     "latest"\n    ],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": "0x0000000000000000000000000000000000000000000000000000000000000000",\n    "id": 2\n}\n\n')),(0,l.kt)("h3",{id:"eth_coinbase"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_coinbase")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_coinbase()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," ")),(0,l.kt)("p",null,"Returns the client coinbase address."),(0,l.kt)("h4",{id:"params-30"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-30"},"Returns"),(0,l.kt)("p",null,"  DATA, 20 bytes - the current coinbase address."),(0,l.kt)("h4",{id:"examples-30"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_coinbase",\n    "params": [\n    ],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":64,\n    "jsonrpc": "2.0",\n    "result": "0x407d73d8a49eeb85d32cf465507dd71d507100c1"\n}\n\n')),(0,l.kt)("h3",{id:"eth_hashrate"},(0,l.kt)("inlineCode",{parentName:"h3"},"eth_hashrate")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"eth_hashrate()")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," ")),(0,l.kt)("p",null,"Returns the number of hashes per second that the node is mining with."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note:")," Always return 1 in Axon network."),(0,l.kt)("h4",{id:"params-31"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"None")),(0,l.kt)("h4",{id:"returns-31"},"Returns"),(0,l.kt)("p",null,"QUANTITY - number of hashes per second."),(0,l.kt)("h4",{id:"examples-31"},"Examples"),(0,l.kt)("p",null,"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "eth_hashrate",\n    "params": [\n    ],\n    "id": 64\n}\n')),(0,l.kt)("p",null,"Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":64,\n    "jsonrpc": "2.0",\n    "result": "0x38a"\n}\n\n')),(0,l.kt)("h2",{id:"rpc-types"},"RPC Types"),(0,l.kt)("h3",{id:"blockid"},(0,l.kt)("inlineCode",{parentName:"h3"},"BlockId")),(0,l.kt)("p",null,"Default block parameters can be one of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Number | BN | BigNumber: A block number starting from 0.This is a 64-bit unsigned integer type encoded as the 0x-prefixed hex string in JSON.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'"earliest" - String: The genesis block.')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'"latest" - String: The latest block (current head of the blockchain).')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'"pending" - String: The currently mined block (including pending transactions).'))),(0,l.kt)("h3",{id:"h160"},(0,l.kt)("inlineCode",{parentName:"h3"},"H160")),(0,l.kt)("p",null,"Fixed-size uninterpreted hash type with hex encoded 20 bytes size."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"0x92df69a492c93d22c90247434b8d80944daa38fa\n")),(0,l.kt)("h3",{id:"h256"},(0,l.kt)("inlineCode",{parentName:"h3"},"H256")),(0,l.kt)("p",null,"The Hex encoded 32-bytes fixed-length binary data."),(0,l.kt)("p",null,"The name comes from the number of bits in the data."),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"0x696447c51fdb84d0e59850b26bc431425a74daaac070f2b14f5602fbb469912a\n")),(0,l.kt)("h3",{id:"hex"},(0,l.kt)("inlineCode",{parentName:"h3"},"Hex")),(0,l.kt)("p",null,"0x-prefixed string in JSON."),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"0x0 // Decimal Value is 0\n0x10 // Decimal Value is 16\n10 // Invalid, 0x is required\n")),(0,l.kt)("h3",{id:"hash"},(0,l.kt)("inlineCode",{parentName:"h3"},"Hash")),(0,l.kt)("p",null,"The 32-byte fixed-length binary data.In JSONRPC, it is Hex encoded as a 0x-prefixed hex string."),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65\n")),(0,l.kt)("h3",{id:"string"},(0,l.kt)("inlineCode",{parentName:"h3"},"String")),(0,l.kt)("p",null,"A UTF-8\u2013encoded, growable string."),(0,l.kt)("p",null,"The String type is the most common string type that has ownership over the contents of the string. It has a close relationship with its borrowed counterpart, the primitive str."),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'"0.1.0"\n')),(0,l.kt)("h3",{id:"bool"},(0,l.kt)("inlineCode",{parentName:"h3"},"Bool")),(0,l.kt)("p",null,"The boolean type."),(0,l.kt)("p",null,"The bool represents a value, which could only be either true or false. If you cast a bool into an integer, true will be 1 and false will be 0."),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"true\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"1\n")),(0,l.kt)("h3",{id:"bloom"},(0,l.kt)("inlineCode",{parentName:"h3"},"Bloom")),(0,l.kt)("p",null,"Bloom hash type with 256 bytes (2048 bits) size."),(0,l.kt)("h3",{id:"f64"},(0,l.kt)("inlineCode",{parentName:"h3"},"F64")),(0,l.kt)("p",null,'A 64-bit floating point type (specifically, the "binary64" type defined in IEEE 754-2008).'),(0,l.kt)("p",null,"This type is very similar to f32, but has increased precision by using twice as many bits. Please see the documentation for f32 or Wikipedia on double precision values for more information."),(0,l.kt)("h3",{id:"u64"},(0,l.kt)("inlineCode",{parentName:"h3"},"U64")),(0,l.kt)("p",null,"Unsigned 64-bit integer."),(0,l.kt)("h3",{id:"u256"},(0,l.kt)("inlineCode",{parentName:"h3"},"U256")),(0,l.kt)("p",null,"Little-endian large integer type 256-bit unsigned integer."),(0,l.kt)("h3",{id:"transactionview"},(0,l.kt)("inlineCode",{parentName:"h3"},"TransactionView")),(0,l.kt)("p",null,"The TransactionView objects."),(0,l.kt)("h4",{id:"fields"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TransactionView")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U64"},(0,l.kt)("inlineCode",{parentName:"a"},"U64"))," -  64-bit integer that represents the type of the transaction. Axon has evolved to support 3 types of transactions: Legacy is 0x0, Eip2930  is 0x1 and Eip1559  is 0x2."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - block number where this transaction was in. null when it's pending."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash")),"  - DATA, Hex encoded 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonce"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the number of transactions made by the sender prior to this one."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - address of the receiver. null when it's a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  -  QUANTITY - value transferred in Wei."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_price"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - gas price provided by the sender in Wei."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY - the absolute maximum you are willing to pay per unit of gas to get your transaction included in a block. For brevity and clarity, we will refer to this as the Max Fee."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_priority_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - (optional) determined by the user, and is paid directly to miners."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raw"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),"  - The raw is the signed transaction in Recursive Length Prefix (RLP) encoded form."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),"  - DATA - The input of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"public_key"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Input"},(0,l.kt)("inlineCode",{parentName:"a"},"Input")),"  - The public key of the transaction sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"access_list"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-AccessList"},(0,l.kt)("inlineCode",{parentName:"a"},"AccessList")),"  - A list of addresses and storage keys; these addresses and storage keys are added into the accessed_addresses and accessed_storage_keys global sets."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chain_id"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - The id of the chain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"v"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - ECDSA recovery id."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"r"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 32 Bytes - ECDSA signature r."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 32 Bytes - ECDSA signature s.")),(0,l.kt)("h4",{id:"examples-32"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "type": "0x2",\n        "blockNumber": "0x1b4",\n        "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "hash": "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n        "nonce": "0x1",\n        "transactionIndex": "0x1b70",\n        "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n        "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n        "value": "0x0",\n        "gas": "0x73a9",\n        "gasPrice": "0x77359400",\n        "maxFeePerGas": "0x539",\n        "maxPriorityFeePerGas": "0x77359400",\n        "raw": "0x02f8af05018477359400847735940082ea6094ef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca80b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a0fa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3da06079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2",\n        "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n        "publicKey": "0x1113b46c2c52050fb9fd29cf88d4a9f8d253e17515dc142f72d8bb2cd18fdb3e45098e11811bcdd1487bafb7b24bf35c174cf6ede558059e23ad60d312345678",\n        "accessList": [],\n        "chainId": "0x5",\n        "v": "0x0",\n        "r": "0xfa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3d",\n        "s": "0x6079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2"\n    },\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"blockview"},(0,l.kt)("inlineCode",{parentName:"h3"},"BlockView")),(0,l.kt)("p",null,"The BlockView objects."),(0,l.kt)("h4",{id:"fields-1"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"BlockView")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," -  DATA, Hex encoded 32 Bytes - hash of the block. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parent_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - hash of the parent block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sha3_uncles"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - SHA3 of the uncles data in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"author"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H169")),"  - Hex encoded 20 Bytes - the creator of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"miner"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - the address of the beneficiary to whom the mining rewards were given."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the final state trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transactions_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the transaction trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"receipts_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the receipts trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the block number. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_used"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the total used gas by all transactions in this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_limit"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the maximum gas allowed in this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extra_data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),'  - DATA - the "extra data" field of this block.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logs_bloom"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Boolom"},(0,l.kt)("inlineCode",{parentName:"a"},"Boolom")),"  - DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the unix timestamp for when the block was collated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"difficulty"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - integer of the difficulty for this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"total_difficulty"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - integer of the total difficulty of the chain until this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - he minimum fee per gas required for a transaction to be included in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"uncles"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Array<"),(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),(0,l.kt)("inlineCode",{parentName:"li"},">"),"  - Array - Array of uncle hashes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transactions"),":",(0,l.kt)("inlineCode",{parentName:"li"},"Array<"),(0,l.kt)("a",{parentName:"li",href:"#type-RichTransactionOrHash"},(0,l.kt)("inlineCode",{parentName:"a"},"RichTransactionOrHash")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - The transactions in the block body."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - integer the size of this block in bytes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mix_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - Hex encoded 32 Bytes -  a unique identifier for that block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonce"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.")),(0,l.kt)("h3",{id:"web3filter"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3Filter")),(0,l.kt)("p",null,"The Web3Filter objects."),(0,l.kt)("h4",{id:"fields-2"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3Filter")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"from_block"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))," - ",'[optional, default is "latest"]',', hexadecimal block number, or the string "latest", "earliest" or "pending"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"to_block"),":  ",(0,l.kt)("a",{parentName:"p",href:"#type-BlockId"},(0,l.kt)("inlineCode",{parentName:"a"},"BlockId"))," - ",'[optional, default is "latest"]',' ,\nhexadecimal block number, or the string "latest", "earliest" or "pending"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"block_hash"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," - ","[optional]"," With the addition of EIP-234, blockHash restricts the logs returned to the single block with the 32-byte hash blockHash. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - ","[optional]"," - a string representing the address (20 bytes) to check for balance. Null when its pending. Null when its pending log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"topics"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<"),(0,l.kt)("a",{parentName:"p",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash")),(0,l.kt)("inlineCode",{parentName:"p"},">")," - ","[optional]"," - Array of 32 Bytes DATA topics. Topics are order-dependent."))),(0,l.kt)("h3",{id:"accesslist"},(0,l.kt)("inlineCode",{parentName:"h3"},"AccessList")),(0,l.kt)("p",null,"The AccessList objects."),(0,l.kt)("h4",{id:"fields-3"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AccessList")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AccessList"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrar<"),"[",(0,l.kt)("inlineCode",{parentName:"li"},"AccessListItem"),"]",(0,l.kt)("inlineCode",{parentName:"li"},">"),"(#type-AccessListItem) - A list of addresses and storage keys.")),(0,l.kt)("h3",{id:"accesslistitem"},(0,l.kt)("inlineCode",{parentName:"h3"},"AccessListItem")),(0,l.kt)("p",null,"The AccessListItem objects."),(0,l.kt)("h4",{id:"fields-4"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AccessListItem")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - DATA, Hex encoded 20 Bytes - The addresses is added into the accessed_addresses global sets.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"storage_keys"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Arrar<"),"[",(0,l.kt)("inlineCode",{parentName:"p"},"H256"),"]",(0,l.kt)("inlineCode",{parentName:"p"},">"),"(#type-H256) - DATA, Hex encoded 32 Bytes - The storage keys is added into the accessed_storage_keys global sets."))),(0,l.kt)("h3",{id:"transactionview-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"TransactionView")),(0,l.kt)("p",null,"The TransactionView objects."),(0,l.kt)("h4",{id:"fields-5"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TransactionView")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U64"},(0,l.kt)("inlineCode",{parentName:"a"},"U64"))," -  64-bit integer that represents the type of the transaction. Axon has evolved to support 3 types of transactions: Legacy is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x0"),", Eip2930  is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x1")," and Eip1559 is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x2"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - block number where this transaction was in. null when it's pending."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash")),"  - DATA, Hex encoded 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonce"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - the number of transactions made by the sender prior to this one."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - address of the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - address of the receiver. null when it's a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  -  QUANTITY - value transferred in Wei."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_price"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - gas price provided by the sender in Wei."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY - the absolute maximum you are willing to pay per unit of gas to get your transaction included in a block. For brevity and clarity, we will refer to this as the Max Fee."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_priority_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - (optional) determined by the user, and is paid directly to miners."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raw"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),"  - The raw is the signed transaction in Recursive Length Prefix (RLP) encoded form"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),"  - DATA - The input of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"public_key"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Input"},(0,l.kt)("inlineCode",{parentName:"a"},"Input")),"  - The public key of the transaction sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"access_list"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-AccessList"},(0,l.kt)("inlineCode",{parentName:"a"},"AccessList")),"  - A list of addresses and storage keys; these addresses and storage keys are added into the accessed_addresses and accessed_storage_keys global sets."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chain_id"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - The id of the chain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"v"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - ECDSA recovery id."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"r"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 32 Bytes - ECDSA signature r."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 32 Bytes - ECDSA signature s.")),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "result": {\n        "type": "0x2",\n        "blockNumber": "0x1b4",\n        "blockHash": "0x9a13208ce76c32638f509064545765c8341db9178b77b4f47b458a66325494fd",\n        "hash": "0x41e946c6f4dd97ad2828c056af973087b53044bf567caf0ea870ab45460afd65",\n        "nonce": "0x1",\n        "transactionIndex": "0x1b70",\n        "from": "0x92df69a492c93d22c90247434b8d80944daa38fa",\n        "to": "0xef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca",\n        "value": "0x0",\n        "gas": "0x73a9",\n        "gasPrice": "0x77359400",\n        "maxFeePerGas": "0x539",\n        "maxPriorityFeePerGas": "0x77359400",\n        "raw": "0x02f8af05018477359400847735940082ea6094ef11d1c2aa48826d4c41e54ab82d1ff5ad8a64ca80b844a9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000c080a0fa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3da06079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2",\n        "input": "0xa9059cbb0000000000000000000000005cf83df52a32165a7f392168ac009b168c9e89150000000000000000000000000000000000000000000000000000000000000000",\n        "publicKey": "0x1113b46c2c52050fb9fd29cf88d4a9f8d253e17515dc142f72d8bb2cd18fdb3e45098e11811bcdd1487bafb7b24bf35c174cf6ede558059e23ad60d312345678",\n        "accessList": [],\n        "chainId": "0x5",\n        "v": "0x0",\n        "r": "0xfa9bc76185d06c6e3178c66c40c195f374e80a78179392a84c1db731ce4d2d3d",\n        "s": "0x6079373330aa2c6d420267d83d8cd685db20638c7935f02a26fdf99dd010bfa2"\n    },\n    "id": 2\n}\n')),(0,l.kt)("h3",{id:"blockview-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"BlockView")),(0,l.kt)("p",null,"The BlockView objects."),(0,l.kt)("h4",{id:"fields-6"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"BlockView")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," -  DATA, Hex encoded 32 Bytes - hash of the block. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parent_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - hash of the parent block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sha3_uncles"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - SHA3 of the uncles data in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"author"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H169")),"  - Hex encoded 20 Bytes - the creator of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"miner"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160")),"  - DATA, Hex encoded 20 Bytes - the address of the beneficiary to whom the mining rewards were given."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the final state trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transactions_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the transaction trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"receipts_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - DATA, Hex encoded 32 Bytes - the root of the receipts trie of the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY, the block number. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_used"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY, the total used gas by all transactions in this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_limit"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY, the maximum gas allowed in this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extra_data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),'  - DATA, the "extra data" field of this block.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logs_bloom"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Boolom"},(0,l.kt)("inlineCode",{parentName:"a"},"Boolom")),"  - DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY, the unix timestamp for when the block was collated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"difficulty"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY, integer of the difficulty for this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"total_difficulty"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - integer of the total difficulty of the chain until this block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - he minimum fee per gas required for a transaction to be included in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"uncles"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Array<"),(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),(0,l.kt)("inlineCode",{parentName:"li"},">"),"  - Array - Array of uncle hashes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transactions"),":",(0,l.kt)("inlineCode",{parentName:"li"},"Array<"),(0,l.kt)("a",{parentName:"li",href:"#type-RichTransactionOrHash"},(0,l.kt)("inlineCode",{parentName:"a"},"RichTransactionOrHash")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - The transactions in the block body."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - QUANTITY - integer the size of this block in bytes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mix_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - Hex encoded 32 Bytes, a unique identifier for that block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonce"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.")),(0,l.kt)("h3",{id:"web3log"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3Log")),(0,l.kt)("p",null,"The Web3Log log objects."),(0,l.kt)("h4",{id:"fields-7"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3Log")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - Hex encoded 20 Bytes - address from which this log originated.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"topics"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<"),(0,l.kt)("a",{parentName:"p",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),(0,l.kt)("inlineCode",{parentName:"p"},">")," - Array of 0 to 4 32 Bytes of indexed log arguments. "),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"data"),":  ",(0,l.kt)("a",{parentName:"p",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))," - contains one or more 32 Bytes non-indexed arguments of the log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"block_hash"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),"  - ","[optional]"," With the addition of EIP-234, blockHash restricts the logs returned to the single block with the 32-byte hash blockHash.   ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"block_number"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - the block number where this log was in. Null when its pending. Null when its pending log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"transaction_hash"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," - Hex encoded 32 Bytes, hash of the transactions this log was created from. null when its pending log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"transaction_index"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - hexadecimal of the transactions index  position log was created from. Null when its pending log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"log_index"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - hexadecimal of the log index position in the block. Null when its pending log.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"removed"),": ",(0,l.kt)("a",{parentName:"p",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool")),"  - true when the log was removed, due to a chain\treorganization. false if it's a valid log."))),(0,l.kt)("h3",{id:"web3syncstatus"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3SyncStatus")),(0,l.kt)("p",null,"The Web3SyncStatus objects."),(0,l.kt)("h4",{id:"fields-8"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3SyncStatus")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"starting_block"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, the block at which the import started (will only be reset, after the sync reached his head)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"current_block"),":  ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, the current block, same as eth_blockNumber."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"highest_block"),":  ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," -QUANTITY, the estimated highest block.")),(0,l.kt)("h3",{id:"web3callrequest"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3CallRequest")),(0,l.kt)("p",null,"The Web3CallRequest objects."),(0,l.kt)("h4",{id:"fields-9"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3CallRequest")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_type"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U64"},(0,l.kt)("inlineCode",{parentName:"a"},"U64"))," - 64-bit integer that represents the type of the transaction. Axon has evolved to support 3 types of transactions: Legacy is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x0"),", Eip2930 is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x1")," and Eip1559  is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x2"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),":",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - Hex encoded 20 Bytes, the address the transaction is sent from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to"),":  ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - Hex encoded 20 Bytes, the address the transaction is directed to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_price"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - ","[optional]"," hexadecimal value of the gasPrice used for each paid gas."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - ","[optional]"," Maximum total fee (base fee + priority fee), in Wei, the sender is willing to pay per gas."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," -  ","[optional]"," hexadecimal value of the gas provided for the transaction execution. ",(0,l.kt)("inlineCode",{parentName:"li"},"eth_call")," consumes zero gas, but this parameter may be needed by some executions."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - ","[optional]"," hexadecimal value of the value sent with this transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex")),"  - ","[optional]"," Hash of the method signature and encoded parameters."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonce"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  - Nonce is a sequence number, issued by the originating externally owned account, used to prevent message replay."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"access_list"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Array<")," ",(0,l.kt)("a",{parentName:"li",href:"#type-AccessList"},(0,l.kt)("inlineCode",{parentName:"a"},"AccessList")),(0,l.kt)("inlineCode",{parentName:"li"},">"),"  - The accessList specifies a list of addresses and storage keys; these addresses and storage keys are added into the accessed_addresses and accessed_storage_keys global sets."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_priority_fee_per_gas"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),"  -  QUANTITY - (optional) determined by the user, and is paid directly to miners.")),(0,l.kt)("h3",{id:"web3feehistory"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3FeeHistory")),(0,l.kt)("p",null,"The Web3FeeHistory objects."),(0,l.kt)("h4",{id:"fields-10"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3FeeHistory")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"oldest_block"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - Lowest number block of the returned range."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reward"),":  ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary<"),(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - (Optional) An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base_fee_per_gas"),":  ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary<"),(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - An array of block base fees per gas. \tThis includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_used_ratio"),":  ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary<"),(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit.")),(0,l.kt)("h3",{id:"web3receipt"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3Receipt")),(0,l.kt)("p",null,"The Web3Receipt objects."),(0,l.kt)("h4",{id:"fields-11"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3Receipt")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY - block number where this transaction was in."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256"))," - DATA, Hex encoded 32 Bytes - hash of the block where this transaction was in."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"contract_address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - DATA, Hex encoded 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cumulative_gas_used"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, the total amount of gas used when this transaction was executed in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"effective_gas_price"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, the price per gas at the time of your transaction, so the total gas cost of your transaction is effectiveGasPrice * gasUsed"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - DATA, Hex encoded 20 Bytes, address of the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_used"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY - The amount of gas used by this specific transaction alone."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logs"),":  ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary<"),(0,l.kt)("a",{parentName:"li",href:"#type-Web3ReceiptLog"},(0,l.kt)("inlineCode",{parentName:"a"},"Web3ReceiptLog")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - Array, array of log objects, which this transaction generated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logs_bloom"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Bloom"},(0,l.kt)("inlineCode",{parentName:"a"},"Bloom"))," - DATA, 256 Bytes, bloom filter for light clients to quickly retrieve related logs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state_root"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))," - DATA 32 bytes of post-transaction stateroot (pre Byzantium)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"status"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY either 1 (success) or 0 (failure)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - DATA, Hex encoded 20 Bytes, address of the receiver. null when its a contract creation transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))," - DATA, Hex encoded 32 Bytes - hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_index"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY - integer of the transactions index position in the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_type"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U64"},(0,l.kt)("inlineCode",{parentName:"a"},"U64"))," - 64-bit integer that represents the type of the transaction. Axon has evolved to support 3 types of transactions: Legacy is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x0"),", Eip2930 is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x1")," and Eip1559 is ",(0,l.kt)("inlineCode",{parentName:"li"},"0x2"),".")),(0,l.kt)("h3",{id:"web3receiptlog"},(0,l.kt)("inlineCode",{parentName:"h3"},"Web3ReceiptLog")),(0,l.kt)("p",null,"The Web3ReceiptLog objects."),(0,l.kt)("h4",{id:"fields-12"},"Fields"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Web3ReceiptLog")," is a JSON object with the following fields."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-H160"},(0,l.kt)("inlineCode",{parentName:"a"},"H160"))," - DATA, Hex encoded 20 Bytes, address from which this log originated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"topics"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Arrary")," ",(0,l.kt)("inlineCode",{parentName:"li"},"<"),(0,l.kt)("a",{parentName:"li",href:"#type-H256"},(0,l.kt)("inlineCode",{parentName:"a"},"H256")),(0,l.kt)("inlineCode",{parentName:"li"},">")," - Array of DATA, array of 0 to 4 Hex encode 32 Bytes DATA of indexed log arguments.",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declare the event with the anonymous specifier."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hex"},(0,l.kt)("inlineCode",{parentName:"a"},"Hex"))," - DATA - contains one or more 32 Bytes non-indexed arguments of the log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_number"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, the block number where this log was in. null when its pending. null when its pending log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"block_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))," - DATA, Hex encode 32 Bytes, hash of the block where this log was in. null when its pending. null when its pending log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_hash"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-Hash"},(0,l.kt)("inlineCode",{parentName:"a"},"Hash"))," - DATA, Hex encoded 32 Bytes, hash of the transactions this log was created from. null when its pending log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction_index"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, integer of the transactions index position log was created from. null when its pending log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"log_index"),":  ",(0,l.kt)("a",{parentName:"li",href:"#type-U256"},(0,l.kt)("inlineCode",{parentName:"a"},"U256"))," - QUANTITY, integer of the log index position in the block. null when its pending log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"removed"),": ",(0,l.kt)("a",{parentName:"li",href:"#type-bool"},(0,l.kt)("inlineCode",{parentName:"a"},"bool"))," - TAG, ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," when the log was removed, due to a chain reorganization. ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," if its a valid log.")))}m.isMDXComponent=!0}}]);